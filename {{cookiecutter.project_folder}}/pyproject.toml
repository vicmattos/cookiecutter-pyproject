[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.0.1"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = [
    {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}"},
]
requires-python = ">={{ cookiecutter.python_version }}"
{%- if cookiecutter.command_line_interface == 'Typer' and cookiecutter.is_package %}
dependencies = [
    "typer[all]",
]
{%- endif %}

[project.urls]
{%- if cookiecutter.documentation_framework == "MKDocs" %}
homepage = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.project_folder}}"
documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.project_folder}}"
{%- endif %}
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_folder}}"

[project.optional-dependencies]
dev = [
    "pip-tools",
    "cleanpy",
    "pre-commit",
{%- if cookiecutter.is_package %}
    "pytest",
{%- endif %}
{%- if cookiecutter.documentation_framework == "MKDocs" %}
    "mkdocs-material",
{%- endif %}
    "commitizen",
]

{%- if cookiecutter.is_package and cookiecutter.command_line_interface != 'No cli' %}

[project.scripts]
{%- if cookiecutter.command_line_interface == 'Typer' %}
{{cookiecutter.project_folder}} = "{{cookiecutter.project_slug}}:main"
{%- elif cookiecutter.command_line_interface == 'Argparse' %}
{{cookiecutter.project_folder}} = "{{cookiecutter.project_slug}}:cli"
{%- endif %}
{%- endif %}

{%- if cookiecutter.is_package %}

[tool.pytest.ini_options]
pythonpath = "src"
{%- endif %}

[tool.ruff]
{%- if cookiecutter.is_package %}
include = ["src/**/*.py"]
{%- endif %}
fix = true
line-length = 100
select = [
    "A",    # flake8-builtins: check builtins used as variables or parameters
    "B",    # flake8-bugbear: security warnings
    "E",    # pycodestyle-errors
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade: better syntax for python version
    "RUF",  # ruff
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.isort]
force-single-line = true

[tool.mypy]
{%- if cookiecutter.is_package %}
files = "src/**/*.py"
{%- endif %}
check_untyped_defs = true

[tool.commitizen]
name = "cz_customize"
tag_format = "$version"
version_scheme = "semver"
version_provider = "pep621"

[tool.commitizen.customize]
message_template = {% raw %}"{{change_type}}{% if scope != '' %}({{scope}}){% endif %}: {{message}}"{% endraw %}
example = "ci(dev): add commitizen to automate commit message build"
schema = "<type>(<scope>): <body>"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
message = "Select the type of change you are committing"
choices = [
    {value = "feat", name = "feat: A new feature. Correlates with MINOR in SemVer"},
    {value = "fix", name = "fix: A bug fix. Correlates with PATCH in SemVer"},
    {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
    {value = "docs", name = "docs: Documentation only changes"},
    {value = "perf", name = "perf: A code change that improves performance"},
    {value = "style", name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"},
    {value = "test", name = "test: Adding missing or correcting existing tests"},
    {value = "build", name = "build: Changes that affect the build system or external dependencies (cookiecutter, pip, docker, etc)"},
    {value = "ci", name = "ci: Changes to CI configuration files and scripts (github actions, pre-commit, make, etc)"},
    {value = "chore", name = "chore: Changes to project configuration (.editorconfig, pyproject.toml, .gitignore, etc)"},
    {value = "revert", name = "revert: Undo changes made in previous commits"},
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change?: (press [enter] to skip)"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Write a short and imperative summary of the code changes: (lower case and no period)\n"


[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
{% if not cookiecutter.is_package %}
[tool.setuptools]
py-modules = []
{% endif %}
